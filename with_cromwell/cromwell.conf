include required(classpath("application"))


webservice
{
  port = 15672
}

system
{
  abort-jobs-on-terminate = false
  graceful-server-shutdown = true
  workflow-restart = true
  max-concurrent-workflows = 1000000
  max-workflow-launch-count = 1000000
  new-workflow-poll-rate = 1
  number-of-workflow-log-copy-workers = 20
  number-of-cache-read-workers = 50
}

workflow-options
{
  workflow-log-dir: "cromwell-workflow-logs"
  workflow-log-temporary: false
  workflow-failure-mode: "ContinueWhilePossible"
  default
  {
    workflow-type: WDL
    workflow-type-version: "draft-2"
  }
}

call-caching
{
  enabled = true
  invalidate-bad-cache-result = true
}

# this is required for shifter to find image from its registry.
docker {
    hash-lookup {
        enabled = false
    }
}

backend
{
  default = "HTCondor"
  providers
  {
    HTCondor {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        filesystems {
          local {
            localization: ["hard-link", "copy"]
            caching {
              duplication-strategy: ["hard-link", "copy"],
              hashing-strategy: "xxh64"
            }
          }
        }

        runtime-attributes = """
          Int cpu = 2
          Float memory_mb = 1024.0
          Float disk_kb = 256000.0
          String? docker
        """

        dockerRoot = "/pscratch/sd/t/tylern/cromwell/cromwell-executions"
        # dockerRoot = "/global/cscratch1/sd/tylern/cromwell-execs"
        # dockerRoot = "$SCRATCH/cromwell-execs"
        
        submit = """
          chmod 755 ${script}

          # gives back only the short part of the uuid (first)
          export name=$(echo ${job_name} | sed 's/cromwell_//g')

          cat > ${cwd}/execution/submitFile <<EOF
          JobBatchName = \$(ClusterID)_$name
          Iwd=${cwd}/execution
          request_memory=${memory_mb}
          request_disk=${disk_kb}
          error=${err}
          output=${out}
          request_cpus=${cpu}
          executable=${script}
          log=${cwd}/execution/execution.log
          queue
          EOF
          condor_submit ${cwd}/execution/submitFile
        """

        submit-docker = """
          chmod 755 ${script}

          # This should be a wrapper which runs script in shifter
          cat > ${cwd}/execution/shifter_script <<EOF
          #!/bin/bash
          # Make the dir on perlmutter
          mkdir -p ${docker_cwd}/execution

          # Run the script in shifter
          shifter --module=none --image=${docker} /bin/bash script

          # Needed for htcondor to bring back to cromwell
          rsync -rav ${docker_cwd}/execution/* .
          EOF

          chmod 755 ${cwd}/execution/shifter_script

          # gives back only the short part of the uuid (first)
          export name=$(echo ${job_name} | sed 's/cromwell_//g')

          cat > ${cwd}/execution/submitFile <<EOF
          JobBatchName = \$(ClusterID)_$name
          transfer_input_files = ${script}
          should_transfer_files = YES
          Iwd=${cwd}/execution
          request_memory=${memory_mb}
          request_disk=${disk_kb}
          error=${err}
          output=${out}
          request_cpus=${cpu}
          executable=${cwd}/execution/shifter_script
          log=${cwd}/execution/execution.log
          queue
          EOF

          condor_submit ${cwd}/execution/submitFile
        """

        kill = "condor_rm -forcex ${job_id}"
        check-alive = "condor_q ${job_id}"
        job-id-regex = "(?sm).*cluster (\\d+)..*"
      }
    }
  } 
} 

database {
  profile = "slick.jdbc.HsqldbProfile$"
  db {
    driver = "org.hsqldb.jdbcDriver"
    url = """
    jdbc:hsqldb:file:cromwell-executions/cromwell-db/cromwell-db;
    shutdown=false;
    hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
    hsqldb.result_max_memory_rows=10000;
    hsqldb.large_data=true;
    hsqldb.applog=1;
    hsqldb.lob_compressed=true;
    hsqldb.script_format=3
    """
    connectionTimeout = 120000
    numThreads = 1
   }
}